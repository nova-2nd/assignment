---
- name: Gather VPC state
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ state.vpc.name }}"
  register: result

- name: Dump VPC info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {item.key: item.value}}, recursive=true) }}"
  loop:
    - { key: 'vpcid', value: "{{ result.vpcs[0].vpc_id }}" }
    - { key: 'dopt_id', value: "{{ result.vpcs[0].dhcp_options_id }}" }

- name: Gather region info
  amazon.aws.aws_az_info:
  register: result

- name: Dump VPC info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {item.key: item.value}}, recursive=true) }}"
  loop:
    - { key: 'region_name', value: "{{ result.availability_zones[0].region_name }}" }

- name: Gather internet gateway info
  amazon.aws.ec2_vpc_igw_info:
    region: "{{ state.vpc.region_name }}"
    filters:
      "tag:Name": "{{ state.vpc.igws.nginx_demo_igw.name }}"
  register: result

- name: Dump internet gateway info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {'igws': {'nginx_demo_igw': {item.key: item.value}}}}, recursive=true) }}"
  loop:
    - { key: 'id', value: "{{ result.internet_gateways[0].internet_gateway_id }}" }

- name: Gather subnet info
  amazon.aws.ec2_vpc_subnet_info:
  register: result

- name: Dump subnet info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {'subnets': {item.tags.Name: {'id': item.id}}}}, recursive=true) }}"
  loop: "{{ result.subnets }}"

- name: Gather elastic IP info
  amazon.aws.ec2_eip_info:
  register: result

- name: Dump elastic IP info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {'eips': {item.tags.Name: {'id': item.allocation_id, 'ip': item.public_ip}}}}, recursive=true) }}"
  loop: "{{ result.addresses }}"

- name: Gather NAT gateway info
  amazon.aws.ec2_vpc_nat_gateway_info:
    filters:
      vpc-id: "{{ state.vpc.vpcid }}"
      state: available
  register: result

- name: Dump NAT gateway info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {'ngws': {item.tags.Name: {'id': item.nat_gateway_id}}}}, recursive=true) }}"
  loop: "{{ result.result }}"

- name: Gather routing tables info
  amazon.aws.ec2_vpc_route_table_info:
    filters:
      vpc-id: "{{ state.vpc.vpcid }}"
  register: result

- name: Dump routing tables info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {'rtbs': {item.tags.Name: {'id': item.route_table_id}}}}, recursive=true) }}"
  loop: "{{ result.route_tables }}"

- name: Gather security group info
  amazon.aws.ec2_security_group_info:
    filters:
      vpc-id: "{{ state.vpc.vpcid }}"
  register: result

- name: Dump security group info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {'sgs': {item.group_name: {'id': item.group_id}}}}, recursive=true) }}"
  loop: "{{ result.security_groups }}"
  when: not item.group_name == 'default'

- name: Gather ALB info
  amazon.aws.elb_application_lb_info:
    names: "{{ state.vpc.alb.nginx_demo_alb.name }}"
  register: result
  ignore_errors: true

- name: Dump ALB info into state
  ansible.builtin.set_fact:
    state: "{{ state | combine({'vpc': {'alb': {'nginx_demo_alb': {'dns': item.dns_name}}}}, recursive=true) }}"
  loop: "{{ result.load_balancers }}"
  ignore_errors: true

- name: Dump result
  # when: 0 > 1
  ansible.builtin.debug:
    var: result
